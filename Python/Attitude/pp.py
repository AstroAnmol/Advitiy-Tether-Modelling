import numpy as np
import forceTorque as ft
import qnv
from constants import state0

t9800 = 9800./10.
t9840 = (9840.)/10.
"""
s = np.array([-6056395.24415306, -30407.4539505846, 216393.944945550, -304.681174309112, 1156.62156606852,\
-8230.36644940574, -0.895944123653304, 0.00634882272291737, -0.421407898943050, \
0.140211277897146, -28.3548587106455, 27.5498845942696, 7.18084524911417])
"""
s9840 = np.array([2066553.69742657, -823006.199067891, 5856225.11423997, -7661.95440634841,\
-342.886447042963, 2440.08549213231, 0.166791724576391, 0.0130642147589025, -0.983485108070435,\
-0.0690426615162807, 0.00756037381099315, 0.00174055433924624, 6.69425388751934e-05])
s9800 = np.array([2097173.87184855, -821623.704536793, 5846386.86524307, -7648.09973232506,\
-348.358933655865, 2479.02559217819, 0.169321866543771, 0.0132277751945325, -0.983053341303979,\
-0.0690018813121698, 0.00199471060218816, -0.000490761452417140, 1.21351878765026e-05])
s9800 = s9800.reshape((13,1))
s9840 = s9840.reshape((13,1))
q9800 = s9800[6:10].copy()
q9840 = s9840[6:10].copy()
v_L_b = np.array([[0.], [0.], [100.]])
v_L_i = qnv.quatRotate(q9800,v_L_b)
dot9800 = np.dot(v_L_i.T, s9800[0:3])/(100*np.linalg.norm(s9800[0:3]))
v_L_i = qnv.quatRotate(q9840,v_L_b)
dot9840 = np.dot(v_L_i.T, s9840[0:3])/(100*np.linalg.norm(s9840[0:3]))
a1,b1 = ft.gravityForceTorque(s9800)
c1,d1 = ft.magneticForceTorque(s9800,t9800)
a2,b2 = ft.gravityForceTorque(s9840)
c2,d2 = ft.magneticForceTorque(s9840,t9840)
v_L_i = qnv.quatRotate(state0[6:10],v_L_b)
dot0 = np.dot(v_L_i.T, state0[0:3])/(100*np.linalg.norm(state0[0:3]))
